package require tcltest
namespace import ::tcltest::*

configure -verbose pbt
# Software under test

source ../utilities/helper_procs.tcl
load ../utilities/vecexpr.so

 test tailtiltA {
    Test: fitVecsToSel
} -setup {
   mol new ../testing_materials/lipid_membrane/singlelipid.gro
   set seltext [format {name "C.*" "D.*" and name ".*A"}]
   set sel1 [atomselect top "$seltext"]
} -body {
    return [fitVecsToSel 4 [$sel1 get x] [$sel1 get y] [$sel1 get z]]
} -result {{-0.024989655264393507 -0.008996903827067389 -0.9996472242002643} {-0.024989655264393507 -0.008996903827067389 -0.9996472242002643} {-0.024989655264393507 -0.008996903827067389 -0.9996472242002643} {-0.024989655264393507 -0.008996903827067389 -0.9996472242002643}} -cleanup {
   mol delete top
}

test tailtiltB {
    Test: fitVecsToSel
} -setup {
   mol new ../testing_materials/lipid_membrane/singlelipid.gro
   set seltext [format {name "C.*" and name ".*B"}]
   set sel1 [atomselect top "$seltext"]
} -body {
    return [fitVecsToSel 4 [$sel1 get x] [$sel1 get y] [$sel1 get z]]
} -result {{0.01699727942753822 -0.008331713045145085 -0.9998208214724253} {0.01699727942753822 -0.008331713045145085 -0.9998208214724253} {0.01699727942753822 -0.008331713045145085 -0.9998208214724253} {0.01699727942753822 -0.008331713045145085 -0.9998208214724253}} -cleanup {
   mol delete top
}

test tailtilt90 {
    Test: fitVecsToSel
} -setup {
   mol new ../testing_materials/lipid_membrane/90degreelipid.gro
   set seltext [format {name "C.*" and name ".*B"}]
   set sel1 [atomselect top "$seltext"]
} -body {
    return [fitVecsToSel 4 [$sel1 get x] [$sel1 get y] [$sel1 get z]]
} -result {{0.016996254027375264 -0.9998208399974864 0.008331581828062434} {0.016996254027375264 -0.9998208399974864 0.008331581828062434} {0.016996254027375264 -0.9998208399974864 0.008331581828062434} {0.016996254027375264 -0.9998208399974864 0.008331581828062434}} -cleanup {
   mol delete top
}

test tailtilt30 {
    Test: fitVecsToSel
} -setup {
   mol new ../testing_materials/lipid_membrane/30degreelipid.gro
   set seltext [format {name "C.*" and name ".*B"}]
   set sel1 [atomselect top "$seltext"]
} -body {
    return [fitVecsToSel 4 [$sel1 get x] [$sel1 get y] [$sel1 get z]]
} -result {{0.01700683127071718 -0.5071939901785861 -0.8616641016178251} {0.01700683127071718 -0.5071939901785861 -0.8616641016178251} {0.01700683127071718 -0.5071939901785861 -0.8616641016178251} {0.01700683127071718 -0.5071939901785861 -0.8616641016178251}} -cleanup {
   mol delete top
}

test tailtilt180 {
    Test: fitVecsToSel
} -setup {
   mol new ../testing_materials/lipid_membrane/180degreelipid.gro
   set seltext [format {name "C.*" and name ".*B"}]
   set sel1 [atomselect top "$seltext"]
} -body {
    return [fitVecsToSel 4 [$sel1 get x] [$sel1 get y] [$sel1 get z]]
} -result {{0.016997296684880182 0.008331912205216686 0.999820819519383} {0.016997296684880182 0.008331912205216686 0.999820819519383} {0.016997296684880182 0.008331912205216686 0.999820819519383} {0.016997296684880182 0.008331912205216686 0.999820819519383}} -cleanup {
   mol delete top
}

test fittailszshift {
    Test: fitTailVectors
} -setup {
   mol new ../testing_materials/Single_chain/singlechain.gro
   set sel1 [atomselect top "all"]
} -body {
    return [fitTailVectors 4 [$sel1 get z] 1]
} -result -6.0 -cleanup {
   mol delete top
}

test fittailssinglepoint {
    Test: fitTailVectors
} -setup {
   mol new ../testing_materials/Single_chain/singlechainstacked.gro
   set sel1 [atomselect top "all"]
} -body {
    return [fitTailVectors 4 [$sel1 get z] 1]
} -result 0.0 -cleanup {
   mol delete top
}

test fittailsdoublelength {
    Test: fitTailVectors
} -setup {
   mol new ../testing_materials/Single_chain/singlechaindoublelength.gro
   set sel1 [atomselect top "all"]
} -body {
    return [fitTailVectors 4 [$sel1 get z] 1]
} -result -12.0 -cleanup {
   mol delete top
}

test fittailscheckx {
    Test: fitTailVectors
} -setup {
   mol new ../testing_materials/Single_chain/singlechain.gro
   set sel1 [atomselect top "all"]
} -body {
    return [fitTailVectors 4 [$sel1 get x] 1]
} -result 0.0 -cleanup {
   mol delete top
}

test fittailschecky {
    Test: fitTailVectors
} -setup {
   mol new ../testing_materials/Single_chain/singlechain.gro
   set sel1 [atomselect top "all"]
} -body {
    return [fitTailVectors 4 [$sel1 get y] 1]
} -result 0.0 -cleanup {
   mol delete top
}

test fittailssquarez {
    Test: fitTailVectors
} -setup {
   mol new ../testing_materials/Single_chain/squarechain.gro
   set sel1 [atomselect top "all"]
} -body {
    return [fitTailVectors 4 [$sel1 get z] 1]
} -result 20.0 -cleanup {
   mol delete top
}

test fittailssquarex {
    Test: fitTailVectors
} -setup {
   mol new ../testing_materials/Single_chain/squarechain.gro
   set sel1 [atomselect top "all"]
} -body {
    return [fitTailVectors 4 [$sel1 get x] 1]
} -result 0.0 -cleanup {
   mol delete top
}

test joinvcatlist {
    Test: concatenateList
} -setup {
   set data {1 2 3 4 5}
   set test [join $data " , "] 
    set test2 [concatenateList $data ,]
    if {$test == $test2} {
    set l 0
    } else {
    set l 1
    }
} -body {
    return $l
} -result 0 -cleanup {}

test catlistorfunc {
    Test: concatenateList
} -setup {
   set data {1 2 3 4 5}
} -body {
    return [concatenateList $data "or"]
} -result "(1) or (2) or (3) or (4) or (5)" -cleanup {}

test basicpopctail {
    Test: findHeadsAndTails
} -setup {
   set data {{{C1A D2A C3A C4A} {C1B C2B C3B C4B}}}
} -body {
    return [findHeadsAndTails $data]
} -result {{{C1A C1B}} {{C4A C4B}}} -cleanup {}

test popctailmiddleremoved {
    Test: findHeadsAndTails
} -setup {
   set data {{{C1A C4A} {C1B C4B}}}
} -body {
    return [findHeadsAndTails $data]
} -result {{{C1A C1B}} {{C4A C4B}}} -cleanup {}

test basicleaflettop {
    Test: assignLeaflet
} -setup {
   mol new ../testing_materials/lipid_membrane/insane.gro
   assignLeaflet 0 {POPC} {{{C1A C1B}} {{C4A C4B}}} 1 NULL 
   set sel [atomselect top "resname POPC and z > 100"]
   set num [lsort -unique [$sel get user]]
} -body {
    return $num
} -result 1.0 -cleanup {
   mol delete top
}

test basicleafletbottom {
    Test: assignLeaflet
} -setup {
   mol new ../testing_materials/lipid_membrane/insane.gro
   assignLeaflet 0 {POPC} {{{C1A C1B}} {{C4A C4B}}} 1 NULL 
   set sel [atomselect top "resname POPC and z < 100"]
   set num [lsort -unique [$sel get user]]
} -body {
    return $num
} -result 2.0 -cleanup {
   mol delete top
}

test Singlelipidturned {
    Test: assignLeaflet
} -setup {
   mol new ../testing_materials/lipid_membrane/fullmemsingletilt.gro
   assignLeaflet 0 {POPC} {{{C1A C1B}} {{C4A C4B}}} 8 NULL 
   set sel [atomselect top "resname POPC and resid 1000"]
   set num [lsort -unique [$sel get user]]
} -body {
    return $num
} -result 3.0 -cleanup {
   mol delete top
}

test Singlelipidturnedminwindow {
    Test: assignLeaflet
} -setup {
   mol new ../testing_materials/lipid_membrane/fullmemsingletilt.gro
   assignLeaflet 0 {POPC} {{{C1A C1B}} {{C4A C4B}}} 2 NULL 
   set sel [atomselect top "resname POPC and resid 1000"]
   set num [lsort -unique [$sel get user]]
} -body {
    return $num
} -result 2.0 -cleanup {
   mol delete top
}

test 90Degrees {
    Test: convertRadianToDegree
} -setup {
   set num [convertRadianToDegree 1.5708]
   set rnum [expr round($num)]
} -body {
    return $rnum
} -result 90 -cleanup {}

test 180Degrees {
    Test: convertRadianToDegree
} -setup {
   set num [convertRadianToDegree 3.14159]
   set rnum [expr round($num)]
} -body {
    return $rnum
} -result 180 -cleanup {}

test 640Degrees {
    Test: convertRadianToDegree
} -setup {
   set num [convertRadianToDegree 11.1701]
   set rnum [expr round($num)]
} -body {
    return $rnum
} -result 640 -cleanup {}

test Onelength {
    Test: calculateLsqNormFactor
} -setup {
   set Normlist [calculateLsqNormFactor 1]
} -body {
    return $Normlist
} -result {0.0} -cleanup {}

test fourlength {
    Test: calculateLsqNormFactor
} -setup {
   set Normlist [calculateLsqNormFactor 4]
} -body {
    return $Normlist
} -result {-1.5 -0.5 0.5 1.5} -cleanup {}

test fivelength {
    Test: calculateLsqNormFactor
} -setup {
   set Normlist [calculateLsqNormFactor 5]
} -body {
    return $Normlist
} -result {-2.0 -1.0 0.0 1.0 2.0} -cleanup {}

test longlength {
    Test: calculateLsqNormFactor
} -setup {
   set Normlist [calculateLsqNormFactor 20]
} -body {
    return $Normlist
} -result {-9.5 -8.5 -7.5 -6.5 -5.5 -4.5 -3.5 -2.5 -1.5 -0.5 0.5 1.5 2.5 3.5 4.5 5.5 6.5 7.5 8.5 9.5} -cleanup {}