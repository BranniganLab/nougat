"""
Created on Fri Jul 21 11:18:40 2023.

@author: js2746
"""

import pytest
import numpy as np
from pathlib import Path
import os
import sys
sys.path.append(os.path.abspath('../plotting/'))
from nougat import *
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%% FIXTURES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


@pytest.fixture(scope="module")
def cwd():
    """
    Get current working directory.

    """
    return Path.cwd()


@pytest.fixture(scope='module', params=["cart", "polar"])
def coordsys(request):
    """
    Supply the proper coordinate system name to the test function requesting it.

    """
    return request.param


@pytest.fixture(scope='module', params=["zone", "ztwo", "zplus", "zzero"])
def surface4(request):
    """
    Supply all four surfaces to the test function requesting it.

    """
    return request.param


@pytest.fixture(scope='module', params=["zone", "ztwo", "zplus", "zzero", "zminus"])
def surface5(request):
    """
    Supply all five surfaces to the test function requesting it.

    """
    return request.param


@pytest.fixture(scope='module', params=["zone", "ztwo"])
def surface2(request):
    """
    Supply z1 and z2 to the test function requesting it.

    """
    return request.param


@pytest.fixture(scope='module', params=["E-protein", "flat"])
def system(request):
    """
    Supply the system being tested to the test function requesting it.

    """
    return request.param


@pytest.fixture(scope='module', params=["height", "thickness"])
def quantity(request):
    """
    Supply quantity of interest to the test function requesting it.

    """
    return request.param


@pytest.fixture(scope='module')
def membrane(cwd, coordsys, system):
    """
    Create membrane objects for each of the test systems.

    Parameters
    ----------
    coordsys : str
        "cart" or "polar."
    system : str
        The name of the system being tested.

    Returns
    -------
    Membrane object and its Height and Thickness Field_set objects.

    """
    if coordsys == "cart":
        polar = False
    elif coordsys == "polar":
        polar = True
    test_root_path = make_root_path(cwd, coordsys, system, test=True)
    m = run_nougat(test_root_path, polar, "htc")
    return m

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%% FUNCTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


def make_root_path(wd, coords, sys, test):
    """
    Make the correct path for nougat testing to use. Should point to the \
    outputs folder generated by nougat.tcl.

    Parameters
    ----------
    wd : Path
        The current working directory.
    coords : str
        The coordinate system used.
    sys : str
        The name of the system.
    test : bool
        If True, generate path to test directory. If False, generate path to \
        reference values directory.

    Returns
    -------
    Path.

    """
    if sys == "E-protein":
        directory = "E-protein_trajectory"
    elif sys == "flat":
        directory = "flat_surface_test"
    if test:
        subdir = "test_"
    else:
        subdir = sys + "_"
    if coords == "cart":
        root = wd.joinpath(directory, subdir + "cart_5_5_0_-1_1")
    elif coords == "polar":
        root = wd.joinpath(directory, subdir + "polar_3_12_0_-1_1")
    return root


def make_py_ref_path(wd, coords, sys, surf, quant, file_format):
    """
    Concatenate strings together to make the path to the correct test files.

    Parameters
    ----------
    wd: string
        Path to current working directory.
    sys: string
        Which test system the test pertains to.
    coords: string
        Coordinate system; 'cart' or 'polar'
    surf: sring
        The membrane surface in question (z1, z2, z0, or z+)
    quant: string
        The quantity being measured(height, thickness, curvature, etc.)
    file_format: string
        ".dat" or ".npy"

    Returns
    -------
    expected: Path
        Path to the stored reference values.

    """
    ref_root = make_root_path(wd, coords, sys, test=False)
    if file_format == ".npy":
        file_type = "trajectory"
    elif file_format == ".dat":
        file_type = "average"
    ref_path = ref_root.joinpath(file_type, quant, surf + file_format)
    return ref_path


def make_tcl_paths(wd, coords, sys, surf):
    """
    Concatenate strings together to make the paths to the correct and reference\
    files.

    Parameters
    ----------
    wd : Path
        The current working directory.
    coords : str
        The coordinate system used.
    sys : str
        The name of the system.
    surf: sring
        The membrane surface in question (z1, z2, z0, or z+)

    Returns
    -------
    (Path, Path)

    """
    ref_root = make_root_path(wd, coords, sys, test=False)
    ref_path = ref_root.joinpath("tcl_output", "height", surf + ".dat")

    test_root = make_root_path(wd, coords, sys, test=True)
    test_path = test_root.joinpath("tcl_output", "height", surf + ".dat")
    return (ref_path.resolve(), test_path.resolve())


def arrays_equal(f1, f2, tolerance):
    """
    Determine whether two arrays have identical elements.

    Parameters
    ----------
    f1 : np.ndarray
    f2 : np.ndarray
    tolerance: float
        The amount of tolerance you have for differences between arrays. Should\
        be a small number!

    Returns
    -------
    Bool
        Whether or not the two arrays contain identical elements.

    """
    if tolerance == 0:
        return np.array_equal(f1, f2, equal_nan=True)
    elif tolerance > 0:
        return np.allclose(f1, f2, rtol=0, atol=tolerance, equal_nan=True)
    else:
        raise ValueError("Tolerance must be positive or 0.")


def load(path):
    """
    Load the contents of a saved nougat output file into memory.

    Parameters
    ----------
    path : Path
        The file path.

    Raises
    ------
    Exception
        If you provide a file that isn't a .dat or .npy then this will raise an\
        error.

    Returns
    -------
    arr : np.ndarray
        The data contained inside the file.

    """
    if path.suffix == ".npy":
        arr = np.load(path)
    elif path.suffix == ".dat":
        arr = np.genfromtxt(path, missing_values="nan", filling_values=np.nan)
    else:
        raise Exception("Must provide .npy or .dat file.")
    return arr


# %%%%%%%%%%%%%%%%%%%%%%%%%% TESTS ARE BELOW %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# Test if TCL outputs match

def test_if_tcl_heights_match(cwd, coordsys, system, surface4):
    if surface4 == "zplus":
        pytest.skip("nougat.tcl does not measure zplus; skipping zplus test")
    else:
        ref, test = make_tcl_paths(cwd, coordsys, system, surface4)
        assert arrays_equal(load(ref), load(test), 1e-11)

# Still needed: density, order, tilt tests


# Test if python trajectory outputs match

def test_if_trajectories_match(cwd, coordsys, surface4, system, quantity, membrane):
    if quantity == "height":
        fld_set = membrane.children['z']
    elif quantity == "thickness":
        fld_set = membrane.children['t']
        if surface4 == "zplus":
            pytest.skip()
        elif surface4 == "zzero":
            pytest.skip()
    if surface4 == "zone":
        surf = fld_set.outer
    elif surface4 == "ztwo":
        surf = fld_set.inner
    elif surface4 == "zplus":
        surf = fld_set.plus
    elif surface4 == "zzero":
        surf = membrane.children["z_zero"]
    else:
        raise Exception("Something went wrong")

    test_array = surf.traj._traj_to_3darray()

    ref_path = make_py_ref_path(cwd, coordsys, system, surface4, quantity, ".npy")
    ref = load(ref_path)

    assert arrays_equal(ref, test_array, 1e-11)

# Still needed: curvature, density, order, tilt tests


"""
def test_whether_flat(cwd, coordsys):
    if coordsys == "cart":
        settings = "_5_5_0_-1_1"
    else:
        settings = "_3_12_0_-1_1"
    Hone = np.load(cwd.joinpath("flat_surface_test", "test_" + coordsys + settings, "trajectory", "curvature", "mean", "zone.npy"))
    Htwo = np.load(cwd.joinpath("flat_surface_test", "test_" + coordsys + settings, "trajectory", "curvature", "mean", "ztwo.npy"))
    Hplus = Hone + Htwo / 2.0
    avgHplus = np.nanmean(Hplus)
    assert avgHplus <= 0.000000000001 and avgHplus >= -0.000000000001


def test_whether_flat_gaussian(cwd, coordsys):
    if coordsys == "cart":
        settings = "_5_5_0_-1_1"
    else:
        settings = "_3_12_0_-1_1"
    Kone = np.load(cwd.joinpath("flat_surface_test", "test_" + coordsys + settings, "trajectory", "curvature", "gaussian", "zone.npy"))
    Ktwo = np.load(cwd.joinpath("flat_surface_test", "test_" + coordsys + settings, "trajectory", "curvature", "gaussian", "ztwo.npy"))
    Kplus = Kone + Ktwo / 2.0
    avgKplus = np.nanmean(Kplus)
    assert avgKplus <= 0.000000000001 and avgKplus >= -0.000000000001
"""


@pytest.mark.xfail(strict=True)
def test_if_leaflets_are_distinct(cwd, coordsys, system, quantity, membrane):
    if quantity == "height":
        fld_set = membrane.children['z']
    elif quantity == "thickness":
        fld_set = membrane.children['t']
    outer = fld_set.outer.traj._traj_to_3darray()
    inner = fld_set.inner.traj._traj_to_3darray()

    assert arrays_equal(outer, inner, 0)

# Still needed: curvature, order, tilt


# Test if python time-averages match

def test_if_avg_heights_thicknesses_match(cwd, coordsys, surface4, system, quantity, membrane):
    if quantity == "height":
        fld_set = membrane.children['z']
    elif quantity == "thickness":
        fld_set = membrane.children['t']
        if surface4 == "zplus":
            pytest.skip()
        elif surface4 == "zzero":
            pytest.skip()

    # get reference avg
    ref_path = make_py_ref_path(cwd, coordsys, system, surface4, quantity, ".dat")
    ref = np.genfromtxt(ref_path, delimiter=",", missing_values="nan", filling_values=np.nan)

    # calc nougat avg
    if surface4 == "zone":
        surf = fld_set.outer
    elif surface4 == "ztwo":
        surf = fld_set.inner
    elif surface4 == "zplus":
        surf = fld_set.plus
    elif surface4 == "zzero":
        surf = membrane.children["z_zero"]
    else:
        raise Exception("Something went wrong")
    test_array = np.round(surf.traj.avg(), decimals=5)

    assert arrays_equal(ref, test_array, 1e-11)


# Still needed: curvature, order, tilt, normal_vectors


# BELOW: old density tests that need to be re-implemented
"""
def test_if_densities_match(cwd, coordsys, surface2):
    if coordsys == "cart":
        coordsys_path = "_cart_5_5_0_-1_1"
    elif coordsys == "polar":
        coordsys_path = "_polar_3_12_0_-1_1"
    exp = cwd.joinpath("E-protein_trajectory/E-protein" + coordsys_path, "trajectory", "density", "DTPC", surface2 + ".npy")
    test = cwd.joinpath("E-protein_trajectory/test" + coordsys_path, "trajectory", "density", "DTPC", surface2 + ".npy")
    paths = Comparison(test, exp)
    assert arrays_equal(paths, 'npy', 1e-11)


def test_if_avg_densities_match(cwd, coordsys, surface2, system):
    paths = make_avg_paths(cwd, system, coordsys, surface2, "avgdensity")
    assert arrays_equal(paths, 'dat', 1e-11)
"""
